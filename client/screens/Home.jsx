import { View, Text, StyleSheet, ScrollView, RefreshControl, ActivityIndicator } from 'react-native'
import React, { useCallback, useEffect, useState } from 'react'
import { useFonts } from 'expo-font';
import FormField from '../components/FormField';
import Card from '../components/Card';

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) return data.map((post) => <Card key={post._id} item={post} />)
  else return <Text style={styles.titleRenderCard}>{title}</Text>

}

const Home = () => {
  const [searchText, setSearchText] = useState('')
  const [posts, setPosts] = useState([])
  const [searchedResults, setSearchedResults] = useState([])
  const [loading, setLoading] = useState(false)
  const [searchTimeOut, setSearchTimeOut] = useState(null)

  const baseUrl = "http://192.168.1.104:9000" 

  const fetchPosts = async () => {
    setLoading(true)
    try {
      const response = await fetch(`${baseUrl}/api/post/all`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      })
      if (response.ok) {
        const result = await response.json();
        setPosts(result.data.reverse()) //reverse  the array to diplay the newest posts
      }


    } catch (error) {
      alert(error)

    } finally {
      setLoading(false)
    }
  }
  useEffect(() => {
    fetchPosts()
  }, [])

  const [refreshing, setRefreshing] = useState(false);
  const wait = (timeout) => {
    return new Promise(resolve => setTimeout(resolve, timeout));
  }

  const onRefresh = useCallback(() => {
    setRefreshing(true);
    wait(1000).then(() => {
      setRefreshing(false)
      fetchPosts();
    });
  }, []);

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeOut)
    setSearchText(e)

    setSearchTimeOut(
      setTimeout(() => {
        const searchResults = posts.filter((item) => item?.name.toLowerCase().includes(searchText.toLowerCase()) || item?.prompt.
          toLowerCase().includes(searchText.toLowerCase()))
        setSearchedResults(searchResults)
      }, 500)
    )

  }



  const [fontsLoaded] = useFonts({
    'Nunito': require('../assets/fonts/Nunito-Medium.ttf'),
    'NunitoBold': require('../assets/fonts/Nunito-Bold.ttf'),
  });
  if (!fontsLoaded) {
    return null;
  }
  return (
    <ScrollView style={styles.mainContainer} showsVerticalScrollIndicator={false}
      refreshControl={
        <RefreshControl
          refreshing={refreshing}
          onRefresh={onRefresh}

        />} >

      <View style={styles.titleContainer}>
        <Text style={styles.title1}>The Community Showcase</Text>
        <Text style={styles.title2}>Browse through a collection of imaginative and visually stunning images generated by DALL-E AI</Text>
      </View>

      <FormField value={searchText} handleChange={handleSearchChange} label="Search Posts" placeholder="Search Posts" />

      <View style={{ marginTop: 10 }}>
        {
          loading ?
            <View>
              <ActivityIndicator size="large" />
            </View>
            :
            <>
              {
                searchText && (
                  <Text style={{ color: "#666e75", fontFamily: "NunitoBold", marginBottom: 3 }} >
                    Showing results for <Text style={{ color: "#222328" }}>
                      {searchText}
                    </Text>
                  </Text>
                )
              }

              <View>
                {
                  searchText ? (
                    <View style={styles.container}>
                      <View style={styles.column}>
                        <RenderCards data={searchedResults.filter((pin, index) => index % 2 === 0)} title="No search Results found" />

                      </View>

                      <View style={styles.column}>
                        <RenderCards data={searchedResults.filter((pin, index) => index % 2 !== 0)}  />
                      </View>

                    </View>
                  ) : (

                    <View style={styles.container}>
                      <View style={styles.column}>
                        <RenderCards data={posts.filter((pin, index) => index % 2 === 0)} title="No posts found" />

                      </View>

                      <View style={styles.column}>
                        <RenderCards data={posts.filter((pin, index) => index % 2 !== 0)}  />

                      </View>
                    </View>

                  )
                }

              </View>

            </>

        }

      </View>


    </ScrollView>
  )
}
export const styles = StyleSheet.create({
  mainContainer: {
    padding: 10,

  },
  titleRenderCard: {
    color: "#6449ff",
    marginTop: 5,
    fontFamily: "NunitoBold",
    fontSize : 15,
  },
  titleContainer: {
    marginVertical: 5,
    marginBottom: 20,
  },
  title1: {
    fontFamily: "NunitoBold",
    fontSize: 21
  },
  title2: {
    fontFamily: "Nunito",
    fontSize: 13

  },

  container: {
    flexDirection: 'row',
  },
  column: {
    flex: 1,
  },


})

export default Home